# -*- coding: utf-8 -*-
"""1. Generate Summary Statistics & Summarize Categorical Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mpIm1y2zPQ-VjuhmJXTiD7ehx6XWmT6l

Import Libraries and Data
"""

import pandas as pd
from google.colab import files
uploaded = files.upload()

df = pd.read_excel('/content/Sample - Superstore_table.xlsx')
df.head()

"""Generate Summary Statistics That Variable's Numeric Value"""

# Generate summary statistics (count, mean, std, min, quartiles, max) for 'Sales' column
summary = df['Sales'].describe()
print(summary)

# Calculate key control tendency metrics: mean, median, mode for 'Sales'
meann = df['Sales'].mean()
median = df['Sales'].median()
mode = df['Sales'].mode()

print(f"Mean: {meann}")
print(f"Median: {median}")
print(f"Mode: {mode}")

"""Generate Summary Statistics That Describe Variable Distribution"""

# Calculate metrics related to the distribution: standard deviation, variance, skewness, quartiles
std_deviation = df['Sales'].std()
variance_value = df['Sales'].var()
skewness_value = df['Sales'].skew()

# Calculate the 1st and 3rd quartiles (25th and 75th percentiles)
quartiles = df['Sales'].quantile([0.25, 0.75])

# Print the calculated statistics
print(f"Standard Deviation: {std_deviation}")
print(f"Variance: {variance_value}")
print(f"Skewness: {skewness_value}")
print(f"Quartiles: {quartiles}")

"""Data Visualization"""

# Import necessary visualization libraries
import matplotlib.pyplot as plt
import seaborn as sns

# Create and display a histogram for 'Sales'
plt.hist(df['Sales'], bins=20)
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.title('Histogram of Sales')
plt.show()

# Create a box plot to visually display distibution and outliers of 'Sales'
plt.figure(figsize=(8, 4))
sns.boxplot(x=df['Sales'])
plt.xlabel('Sales')
plt.title('Box Plot of Sales')
plt.show()

"""Create Crosstab Table"""

# Create a crosstab (contigenc table) to show the relationship between "category" and "Region"
crosstab_table = pd.crosstab(df['Category'], df['Region'])
print(crosstab_table)

# Display the crosstab in a more readable format
from IPython.display import display
display(crosstab_table)

"""Summarizing Categorical Data"""

# Generate frequency counts for the 'Category' column
category_counts = df['Category'].value_counts()
print(category_counts)

# Create a frequency table by resetting the index and renaming columns
frequency_table = category_counts.reset_index()
frequency_table.columns = ['Category', 'Count']

# Print the frequency table
print(frequency_table)

# Calculate the mode (most frequent category) for 'Category'
category_mode = df['Category'].mode()
print(category_mode)

# Pie chart to show the proportion of each category
plt.pie(frequency_table['Count'],
        labels=frequency_table['Category'],
        autopct='%1.1f%%')
plt.title('Proportion of Categories')
plt.show()

# Bar chart to display frequency distribution of 'Category'
plt.bar(frequency_table['Category'], frequency_table['Count'])
plt.xlabel('Category')
plt.ylabel('Count')
plt.title('Frequency Distribution of Category')
plt.show()

"""Transforming Variables into Categorical Data Type"""

# Print data types of all columns
data_types = df.dtypes
print(data_types)

# Get general info about the DataFrame including data types and missing value
df.info()

# Check current data type of 'Category'
print(df['Category'].dtype)

# Convert 'Category' column to categorical data type
df['Category'] = df['Category'].astype('category')

# Verify the new data type of 'Category'
print(df['Category'].dtype)

"""Encode Categorical Data into Numeric Quantities Using

Replace Value
"""

# Replace categorical values in 'Category' with numeric codes
replace_value = df['Category'].replace({'Office Supplies':1, 'Furniture':2, 'Technology':3})
print(replace_value)

"""Encoding Labels"""

# Show 'Ship Mode' colums before label encoding
print(df['Ship Mode']) # before enconding

!pip install scikit-learn

# Perform label endocing to convert 'Ship Mode' into numeric lables
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
encoded_labels = df['Ship Mode'] = le.fit_transform(df['Ship Mode'])

# Print encoded value of 'Ship Mode'
print(encoded_labels)# after encoding

"""One-Hot Encoding:

- Create binary columns for each category, where 1 indicates the presence of the category and 0 indicates absence.
- Use when there is no inherent order among categories.
"""

# Perform one-hot encoding on 'Segment' colums to create binary indicator variables for each category
one_hot_encoding = pd.get_dummies(df['Segment'])
print(one_hot_encoding)

"""Binary Encoding
- Convert each category to binary code and create separate columns for each bit.
- Useful for reducing dimensionality compared to one-hot encoding.
"""

!pip install category_encoders

# Show 'Category' column before binary encoding
print(df['Category'])

# Perform binary encoding on 'Category' to reduce dimensionality comapred one-hot encodinging
import category_encoders as ce
encoder = ce.BinaryEncoder(cols=['Category'])
df_encoder = encoder.fit_transform(df['Category'])
print(df_encoder)

"""Backward Difference Encoding:

- Encode categorical levels based on the difference between the current level and the previous one.
- Useful when there is some meaningful sequential order among categories.
"""

df['Ship Mode'] # before

# Perform backward difference encoding on 'Ship Mode' categpries have some order
encoder = ce.BackwardDifferenceEncoder(cols=['Ship Mode'])
df_encoder = encoder.fit_transform(df['Ship Mode'])
print(df_encoder)